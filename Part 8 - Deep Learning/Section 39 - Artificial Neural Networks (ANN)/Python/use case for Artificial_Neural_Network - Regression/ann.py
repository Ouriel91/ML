# -*- coding: utf-8 -*-
"""Copy of Artificial Neural Network

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P-mbXfupy2MAgJzJWmtOd3T87WoBIT6E

# Artificial Neural Network

### Importing the libraries
"""

import numpy as np
import pandas as pd
import tensorflow as tf

tf.__version__

"""## Part 1 - Data Preprocessing

### Importing the dataset
"""

dataset = pd.read_excel('energy.xlsx')
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values

#print(dataset.isnull().sum())
#print('X:\n',X)
#print('y:\n',y)

"""### Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

"""## Part 2 - Building the ANN

### Initializing the ANN
"""

ann = tf.keras.Sequential()

"""### Adding the input layer and the first hidden layer"""

ann.add(tf.keras.layers.Dense(units = 6,activation='relu'))

"""### Adding the second hidden layer"""

ann.add(tf.keras.layers.Dense(units = 6,activation='relu'))

"""### Adding the output layer"""

#since we do have a regression and not classification
#(the activation function that preferd in classification is sigmoid or softmax)
#so we remove activation function
ann.add(tf.keras.layers.Dense(units = 1))

"""## Part 3 - Training the ANN

### Compiling the ANN
"""

#the loss for regression is the mean squared error
ann.compile(optimizer='adam', loss='mean_squared_error')

"""### Training the ANN model on the Training set"""

ann.fit(X_train, y_train, batch_size=32, epochs=100)

"""### Predicting the results of the Test set


"""

y_pred = ann.predict(X_test)
#print(y_pred)
y_pred_reshape = y_pred.reshape(len(y_pred),1)
y_test_reshape = y_test.reshape(len(y_test),1)
print(np.concatenate((y_pred_reshape,y_test_reshape),1))