# -*- coding: utf-8 -*-
"""Copy of support_vector_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fOevM2x9kdz7EkxEVTQLd_ERXavnqWUI

# Support Vector Regression (SVR)

## Importing the libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

"""## Importing the dataset"""

dataset = pd.read_csv('Position_Salaries.csv')
X = dataset.iloc[:,1:-1].values
y = dataset.iloc[:,-1].values

#print('X: \n', X)
#print('y: \n', y)
#print('null number: \n',dataset.isnull().sum())

"""## Feature Scaling"""

# this dataset has non linear realtionship in level feature (1-10) and salary
# dependent variable (45K-1M)
# SVR model has no explicit equation as simple, multiple and polynomial regression
# (with coefficent and intercpt) so we have to apply feature scaling.
# we don't have to apply feature scaling like linear regression model, because
# the coefficent can compensate with high value of features - like salary here.
# so here in SVR model we have implicit equation between features of matrix and
# dependent variable,  so we have to apply feature scaling

# diffrently from data preprocessong part we don't split the data into train and test sets
# because we want to leverage the maximum data in order to learn the correlation
# between position level and salariest
# also diffrently from data preprocessong part, now we made feature scaling to
# matrix of features **and** dependent variable, because right now the dependent
# variable the salary way high than features (in data preprocessing part, the
# dependent variable was 0 or 1, that was in feature scaling range that we made
# for matrix of features (the range was in [-3,3])) so salary that way high than
# features might be neglected by the model
# so even if there is not an explicit equation (like simple, multiple and polynomial regression)
# and SVR model has a implicit equation we need to do feature scaling

# StandardScaler is excpected as input to 2D array, X is 2D array and y we need
# customize it so we reshape it, len(y) is number of rows that we want,
# 1 is numbers of columns - so show it vertically
y = y.reshape(len(y),1)
#print(y)

# we need 2 diffrent StandardScaler instances beacuse we need diffrent
# standartization (diffent formula - see in data pre processing part) to X and y
from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
sc_y = StandardScaler()

X = sc_X.fit_transform(X)
y = sc_y.fit_transform(y)

#print("X: \n",X)
#print("y: \n",y)

"""## Training the SVR model on the whole dataset"""

from sklearn.svm import SVR
svr = SVR(kernel='rbf') # (Gaussian) Radial Basis Function
# see details here: https://data-flair.training/blogs/svm-kernel-functions/

svr.fit(X,y)

"""## Predicting a new result"""

# as an polynomial regression that checked level 6.5 - check here the scaled value of 6.5 level
# we inverse the scaled value into original value - we inverse the scale of value
# (and the input will be the level scale)
# and finally reshape to avoid from this format error:
# Reshape your data either using array.reshape(-1, 1)
# if your data has a single feature or array.reshape(1, -1) if it contains a single sample.

sc_y.inverse_transform(svr.predict(sc_X.transform([[6.5]])).reshape(-1,1))

"""## Visualising the SVR results"""

# use in inversed values to plot
inverse_X = sc_X.inverse_transform(X)
inverse_y = sc_y.inverse_transform(y)
inverse_predict_X = sc_y.inverse_transform(svr.predict(X).reshape(-1,1))

plt.scatter(inverse_X,inverse_y, color='red')
plt.plot(inverse_X,inverse_predict_X, color='blue')
plt.title('Truth or Bluff (SVR)')
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()

"""## Visualising the SVR results (for higher resolution and smoother curve)"""

X_grid = np.arange(min(sc_X.inverse_transform(X)), max(sc_X.inverse_transform(X)), 0.1)
X_grid = X_grid.reshape((len(X_grid), 1))
plt.scatter(sc_X.inverse_transform(X), sc_y.inverse_transform(y), color = 'red')
plt.plot(X_grid, sc_y.inverse_transform(svr.predict(sc_X.transform(X_grid)).reshape(-1,1)), color = 'blue')
plt.title('Truth or Bluff (SVR)')
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()