# -*- coding: utf-8 -*-
"""Copy of simple_linear_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Spn2QXCfvJ68ZSwNfKs9fOIMDsC5A-iI

# Simple Linear Regression

## Importing the libraries
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

"""## Importing the dataset"""

dataset = pd.read_csv('Salary_Data.csv')
X = dataset.iloc[:, :-1]
y = dataset.iloc[:, -1]

print('X: \n', X)
print('y: \n', y)
print('nulls number: \n',dataset.isnull().sum())

"""## Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=0)

"""## Training the Simple Linear Regression model on the Training set"""

from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(X_train, y_train) #X_train - matrix of features - years experience,
# y_train - vector of dependent variable - salary

"""## Predicting the Test set results"""

y_pred = lr.predict(X_test) #predict matrix of features of X_test
print(y_pred)

"""## Visualising the Training set results"""

# that visualize the trainig set only!!!!!!!!

# 2D plot graphic - real salaries to the predicted salaries (of training set)
# x axis - numbers of experience
# y axis - range of salaries in given dataset
# red plot - real salaries (straight line)
# blue plot - predicted salaries (straight line)

plt.scatter(X_train, y_train, color='red') #put red points in 2D plot
plt.plot(X_train, lr.predict(X_train), color='blue') # plot training set
plt.title('Salary vs Experience (training set)')
plt.xlabel('Years of experiecnce')
plt.ylabel('Salary')
plt.show()

"""## Visualising the Test set results"""

# that visualize the test set only!!!!!!!!
#everything same as above

plt.scatter(X_test, y_test, color='red')
# the regression line resulting from unique equation (linear equation)
# the predicted salaries from test set will be on the same regression line
# as predicted salary of trainig set
# so we don't need to change anything
plt.plot(X_train, lr.predict(X_train), color='blue')
plt.title('Salary vs Experience (test set)')
plt.xlabel('Years of experiecnce')
plt.ylabel('Salary')
plt.show()

"""### Making a single prediction (for example the salary of an employee with 12 years of experience)"""

print("salary of employee with 12 years experience: ",lr.predict([[12]]))

"""Therefore, our model predicts that the salary of an employee with 12 years of experience is $ 138967,5.

Important note: Notice that the value of the feature (12 years) was input in a double pair of square brackets. That's because the "predict" method always expects a 2D array as the format of its inputs. And putting 12 into a double pair of square brackets makes the input exactly a 2D array. Simply put:

12→scalar

[12]→1D array

[[12]]→2D array
"""

print(lr.coef_)
print(lr.intercept_)

"""Therefore, the equation of our simple linear regression model is:

Salary=9345.94×YearsExperience+26816.19

Important Note: To get these coefficients we called the "coef_" and "intercept_" attributes from our regressor object. Attributes in Python are different than methods and usually return a simple value or an array of values.
"""

