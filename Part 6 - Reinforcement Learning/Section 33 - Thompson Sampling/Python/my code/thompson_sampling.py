# -*- coding: utf-8 -*-
"""Copy of thompson_sampling.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/111F0n0Rdd9TQfgi8zJSCAV6enrieVPpg

# Thompson Sampling

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Importing the dataset"""

dataset = pd.read_csv('Ads_CTR_Optimisation.csv')
#print('nulls num:\n', dataset.isnull().sum())

#if you want to see prints of code in very small dataset subset
#just uncomment this lines and change users to number you want
#users = 10
#dataset = dataset.iloc[0:users,:]
#print(dataset)

"""## Implementing Thompson Sampling"""

import random

users_num = len(dataset.axes[0])
ads_num = len(dataset.axes[1])
#print('total users:',users_num)
#print('total ads:',ads_num)

ads_selected = []
numbers_of_rewards_0 = [0] * ads_num
numbers_of_rewards_1 = [0] * ads_num
total_reward = 0

for i in range(0, users_num):
  ad_index = 0
  max_random_draw_from_beta_distributions = 0
  for j in range(0, ads_num):
    #The beta distribution is used to model things that have a limited range.
    #For example, the probability of success in an experiment having only two outcomes,
    #like success and failure. In this case,
    #the outcome of the experiment is only being selected or not selected.
    #see here to more details:
    #https://hackernoon.com/use-beta-distribution-and-thompson-sampling-to-beat-the-multi-armed-bandit-at-the-casino-ulgp3272
    random_beta = random.betavariate(numbers_of_rewards_1[j]+1, numbers_of_rewards_0[j]+1)
    if(max_random_draw_from_beta_distributions < random_beta):
      max_random_draw_from_beta_distributions = random_beta
      ad_index = j

  #print("max random beta is {}, for ad #{} ".format(max_random_draw_from_beta_distributions,ad_index+1))
  ads_selected.append(ad_index)
  reward = dataset.values[i, ad_index]
  if (reward == 1):
    numbers_of_rewards_1[ad_index] += 1
    #print("User #{}, select ad {} ".format(i+1, ad_index+1))
  else:
    numbers_of_rewards_0[ad_index] += 1
    #print("User #{}, not select ad {} ".format(i+1, ad_index+1))
  total_reward += reward
  #print('total_reward', total_reward)
  #print('\n')

"""## Visualising the results - Histogram"""

plt.hist(ads_selected)
plt.title('Histogram of ads selections')
plt.xlabel('Ads')
plt.ylabel('Number of times each ad was selected')
plt.show()