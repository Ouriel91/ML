# -*- coding: utf-8 -*-
"""Copy of apriori.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1peM3drfK50Py6cA60WQ1f8nEC-kpGT4w

# Apriori
"""

# this module not in sklearn so we need to install it
# in google colab it not installed
#!pip install apyori

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

"""## Importing the libraries"""

# this dataset is transactions for week
# header = None needed because the first row is not name of columns
# but it's a transaction
dataset = pd.read_csv('Market_Basket_Optimisation.csv', header=None)

"""## Data Preprocessing"""

# there is no need to find null cells, because each row is transaction
# so it must that transactions should be diffrent and contains null cells
# also, the apriori function in Apyori model excpect to array not to dataset
# in pandas format
transactions = []

transactions_number = len(dataset)
# maximum items in transactions is the column number
transaction_item_number = dataset.shape[1]

# each variable i is list by itself
# each variable j is item in list and it does by inner loop
# (dataset is 2d - rows and cols) and we wil create 2d array properly
# we iterate nested for loop properly
# finally, string each item in new array for apriori model
for i in range (0, transactions_number):
  transactions.append([str(dataset.values[i,j]) for j in range(0, transaction_item_number)])

# printing test
#arr = np.array(transactions)
#newarr = arr.reshape(transactions_number, transaction_item_number)
#print(newarr)

"""## Training the Apriori model on the dataset"""

# apriori get as an input the dataset (new data sety we made)
# min support and min confidence, min lift and min+max length

# min support is (transactions num of specifice transactions / total transactions)
# the min support is someone that bought product (left side)
# will be buy another product (right side)
# to create strong rule for min support we choose products that appear in
# at least 3 transactions in day (more frequently) so 7 days * 3 transactions = 21
# and total transactions is 7501 so 21/7501 ~= 0.003

# the min confidence is someone bought specific product and targeted product
# / total specific product
# we choose 0.2 (not to be correct in most of times and not for to be correct rarely)

# lift - confidence / support
# good minimum lift is 3 to make the rule relevant

# min and max length needed because we want to identify the best deals for customer
# which buy product one and get another one in free
# so we pick one product in left side of the rule and one in right side of rule
# (the range till 2, not include 2, another example: buy 10 products and get 1 for free
# there min length will be 2 and max length 11
from apyori import apriori
rules = apriori(transactions=transactions, min_support = 0.003, min_confidence=0.2,
                min_lift = 3, min_length=2, max_length=2)

"""## Visualising the results"""

results = list(rules)
results

"""### Displaying the first results coming directly from the output of the apriori function"""

# full object (the first one) looks like this:
"""
RelationRecord(
    items=frozenset({'chicken', 'light cream'}),
    support=0.004532728969470737,
    ordered_statistics=[
        OrderedStatistic(
            items_base=frozenset({'light cream'}),
            items_add=frozenset({'chicken'}),
            confidence=0.29059829059829057,
            lift=4.84395061728395)
        ]
    )
"""

#printing test to understand the snippet below
#print(results[0])
#gives:
#RelationRecord(items=frozenset({'chicken', 'light cream'}), support=0.004532728969470737, ordered_statistics=[OrderedStatistic(items_base=frozenset({'light cream'}), items_add=frozenset({'chicken'}), confidence=0.29059829059829057, lift=4.84395061728395)])
#print(results[0][2])
#gives:
#[OrderedStatistic(items_base=frozenset({'light cream'}), items_add=frozenset({'chicken'}), confidence=0.29059829059829057, lift=4.84395061728395)]

#print(results[0][2][0])
#OrderedStatistic(items_base=frozenset({'light cream'}), items_add=frozenset({'chicken'}), confidence=0.29059829059829057, lift=4.84395061728395)

#print(results[0][2][0][0])
#frozenset({'light cream'})
#print(results[0][2][0][1])
#frozenset({'chicken'})

#print(results[0][1])
#support:
#0.004532728969470737

#print(results[0][2][0][2])
#confidence:
#0.29059829059829057

#print(results[0][2][0][3])
#lift:
#4.84395061728395

"""### Putting the results well organised into a Pandas DataFrame"""

# code snippet for display results and descending results
def inspect(results):
    lhs         = [tuple(result[2][0][0])[0] for result in results]
    rhs         = [tuple(result[2][0][1])[0] for result in results]
    supports    = [result[1] for result in results]
    confidences = [result[2][0][2] for result in results]
    lifts       = [result[2][0][3] for result in results]
    return list(zip(lhs, rhs, supports, confidences, lifts))
resultsinDataFrame = pd.DataFrame(inspect(results), columns = ['Left Hand Side', 'Right Hand Side', 'Support', 'Confidence', 'Lift'])

"""### Displaying the results non sorted"""

resultsinDataFrame

"""### Displaying the results sorted by descending lifts"""

resultsinDataFrame.nlargest(n=10, columns='Lift')