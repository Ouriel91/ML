# -*- coding: utf-8 -*-
"""Copy of hierarchical_clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o6O7h-Jrv2FAEvagTwXxLCEpvalSJkTE

# Hierarchical Clustering

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Importing the dataset"""

dataset = pd.read_csv('Mall_Customers.csv')
col_sub_list = [3,4]
#print(col_sub_list)

X = dataset.iloc[:, col_sub_list].values
#print(X)
#print(dataset.isnull().sum())

"""## Using the dendrogram to find the optimal number of clusters"""

from scipy.cluster import hierarchy as sch

# see more details:
# https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.linkage.html
# linkage - Perform hierarchical/agglomerative clustering.
# ward metohd - method of minimum variance, that observation points
# don't vary too much (they have low variance) and that minimize variants
# in each clustering resluting from hierachical clustering
# more details on ward:
# https://en.wikipedia.org/wiki/Ward%27s_method
linkage = sch.linkage(X, method = 'ward')
dendrogram = sch.dendrogram(linkage)
plt.title('Dendrogram')
plt.xlabel('Customers')
plt.ylabel('Euclidean distances')
plt.show()

# now we find longest vertical line that does not cross horizontal line
# pick the longest line and make on it an horizontal line, the number
# of lines that this horizontal line is the number of clusters
# in our case it can be 3 or 5 (it's not very clear what is the longest
# vertical line) we pick 5 as seen in k means algorithem

"""## Training the Hierarchical Clustering model on the dataset"""

from sklearn.cluster import AgglomerativeClustering
hc = AgglomerativeClustering(n_clusters=5, affinity='euclidean', linkage='ward')
y_hc = hc.fit_predict(X)

#print(y_hc)

"""## Visualising the clusters"""

clusters_num = range(0,5)
colors_points = ['red', 'blue', 'green', 'cyan', 'magenta']
annual_col = 0
spending_col = 1
size_customers_points = 100

for i in clusters_num:
  plt.scatter(X[y_hc == i, annual_col], X[y_hc == i, spending_col],
              s = size_customers_points, c = colors_points[i], label = 'Cluster '+str(i+1))

plt.title('Clusters of customers')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.legend()
plt.show()